open getdents64 fstat close
strlen
malloc


some system function sensitive with "mode" lexical
to avoid this just use __mode

piece
	string2.c
	iofile.c
	dirent.c
	stdlib.c
	cmath.c
std
        x86_32 sse 234	
arch---> i686 --> piece-->std--> unix system interface
        x86_64
implement design

===========syscall log=======================
getdents64 in 32 bit can use with linux_dirent64

=======list of syscall=====================================
SYSCALL_DEFINE3(timer_create, const clockid_t, which_clock,
		struct sigevent __user *, timer_event_spec,
		timer_t __user *, created_timer_id);

SYSCALL_DEFINE2(timer_gettime, timer_t, timer_id,
		struct itimerspec __user *, setting);
SYSCALL_DEFINE1(timer_getoverrun, timer_t, timer_id);
SYSCALL_DEFINE4(timer_settime, timer_t, timer_id, int, flags,
		const struct itimerspec __user *, new_setting,
		struct itimerspec __user *, old_setting);
SYSCALL_DEFINE1(timer_delete, timer_t, timer_id);
SYSCALL_DEFINE2(clock_settime, const clockid_t, which_clock,
		const struct timespec __user *, tp);
SYSCALL_DEFINE2(clock_gettime, const clockid_t, which_clock,
		struct timespec __user *,tp);
SYSCALL_DEFINE2(clock_getres, const clockid_t, which_clock,
		struct timespec __user *, tp);
SYSCALL_DEFINE4(clock_nanosleep, const clockid_t, which_clock, int, flags,
		const struct timespec __user *, rqtp,
		struct timespec __user *, rmtp);
SYSCALL_DEFINE1(acct, const char __user *, name);
SYSCALL_DEFINE2(capget, cap_user_header_t, header, cap_user_data_t, dataptr);
SYSCALL_DEFINE2(capset, cap_user_header_t, header, const cap_user_data_t, data);
SYSCALL_DEFINE1(personality, u_long, personality);
SYSCALL_DEFINE1(exit, int, error_code);
SYSCALL_DEFINE1(exit_group, int, error_code);
SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
		infop, int, options, struct rusage __user *, ru);
SYSCALL_DEFINE4(wait4, pid_t, upid, int __user *, stat_addr,
		int, options, struct rusage __user *, ru);	/*use wait4 instead of waitpid */
/*			kernel/fork.c*/
SYSCALL_DEFINE1(set_tid_address, int __user *, tidptr);
SYSCALL_DEFINE1(unshare, unsigned long, unshare_flags);
SYSCALL_DEFINE2(set_robust_list, struct robust_list_head __user *, head,
		size_t, len);
SYSCALL_DEFINE3(get_robust_list, int, pid,
		struct robust_list_head __user * __user *, head_ptr,
		size_t __user *, len_ptr);
SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,
		struct timespec __user *, utime, u32 __user *, uaddr2,
		u32, val3);
SYSCALL_DEFINE2(getgroups, int, gidsetsize, gid_t __user *, grouplist);
SYSCALL_DEFINE2(setgroups, int, gidsetsize, gid_t __user *, grouplist);
SYSCALL_DEFINE2(nanosleep, struct timespec __user *, rqtp,
		struct timespec __user *, rmtp);
SYSCALL_DEFINE2(getitimer, int, which, struct itimerval __user *, value);
SYSCALL_DEFINE3(setitimer, int, which, struct itimerval __user *, value,
		struct itimerval __user *, ovalue);
SYSCALL_DEFINE4(kexec_load, unsigned long, entry, unsigned long, nr_segments,
		struct kexec_segment __user *, segments, unsigned long, flags);
SYSCALL_DEFINE2(delete_module, const char __user *, name_user,
		unsigned int, flags);
SYSCALL_DEFINE3(init_module, void __user *, umod,
		unsigned long, len, const char __user *, uargs);
SYSCALL_DEFINE5(perf_event_open,
		struct perf_event_attr __user *, attr_uptr,
		pid_t, pid, int, cpu, int, group_fd, unsigned long, flags);
SYSCALL_DEFINE3(syslog, int, type, char __user *, buf, int, len);
SYSCALL_DEFINE4(ptrace, long, request, long, pid, long, addr, long, data);
SYSCALL_DEFINE1(sched_get_priority_max, int, policy);
SYSCALL_DEFINE1(sched_get_priority_min, int, policy);
SYSCALL_DEFINE2(sched_rr_get_interval, pid_t, pid,
		struct timespec __user *, interval);
/* SYSCALL_DEFINE1(nice, int, increment); */
SYSCALL_DEFINE3(sched_setscheduler, pid_t, pid, int, policy,
		struct sched_param __user *, param);
SYSCALL_DEFINE2(sched_setparam, pid_t, pid, struct sched_param __user *, param);
SYSCALL_DEFINE1(sched_getscheduler, pid_t, pid);
SYSCALL_DEFINE2(sched_getparam, pid_t, pid, struct sched_param __user *, param);
SYSCALL_DEFINE3(sched_setaffinity, pid_t, pid, unsigned int, len,
		unsigned long __user *, user_mask_ptr);
SYSCALL_DEFINE3(sched_getaffinity, pid_t, pid, unsigned int, len,
		unsigned long __user *, user_mask_ptr);
SYSCALL_DEFINE0(sched_yield);

SYSCALL_DEFINE4(rt_tgsigqueueinfo, pid_t, tgid, pid_t, pid, int, sig,
		siginfo_t __user *, uinfo);
SYSCALL_DEFINE4(rt_sigaction, int, sig,
		const struct sigaction __user *, act,
		struct sigaction __user *, oact,
		size_t, sigsetsize);
SYSCALL_DEFINE2(rt_sigsuspend, sigset_t __user *, unewset, size_t, sigsetsize);
SYSCALL_DEFINE0(pause);
SYSCALL_DEFINE4(rt_sigtimedwait, const sigset_t __user *, uthese,
		siginfo_t __user *, uinfo, const struct timespec __user *, uts,
		size_t, sigsetsize);
SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid_t, pid, int, sig);
SYSCALL_DEFINE2(tkill, pid_t, pid, int, sig);
SYSCALL_DEFINE0(restart_syscall);
SYSCALL_DEFINE4(rt_sigprocmask, int, how, sigset_t __user *, set,
		sigset_t __user *, oset, size_t, sigsetsize);
SYSCALL_DEFINE2(rt_sigpending, sigset_t __user *, set, size_t, sigsetsize);
SYSCALL_DEFINE4(rt_sigtimedwait, const sigset_t __user *, uthese,
		siginfo_t __user *, uinfo, const struct timespec __user *, uts,
		size_t, sigsetsize);
SYSCALL_DEFINE3(rt_sigqueueinfo, pid_t, pid, int, sig,
		siginfo_t __user *, uinfo);
SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval);
SYSCALL_DEFINE2(getpriority, int, which, int, who);
SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,
		void __user *, arg);
SYSCALL_DEFINE2(setregid, gid_t, rgid, gid_t, egid);
SYSCALL_DEFINE1(setgid, gid_t, gid);
SYSCALL_DEFINE2(setreuid, uid_t, ruid, uid_t, euid);
SYSCALL_DEFINE1(setuid, uid_t, uid);
SYSCALL_DEFINE3(setresuid, uid_t, ruid, uid_t, euid, uid_t, suid);
SYSCALL_DEFINE3(getresuid, uid_t __user *, ruid, uid_t __user *, euid, uid_t __user *, suid);
SYSCALL_DEFINE3(setresgid, gid_t, rgid, gid_t, egid, gid_t, sgid);
SYSCALL_DEFINE3(getresgid, gid_t __user *, rgid, gid_t __user *, egid, gid_t __user *, sgid);
SYSCALL_DEFINE1(setfsuid, uid_t, uid);
SYSCALL_DEFINE1(setfsgid, gid_t, gid);
SYSCALL_DEFINE1(times, struct tms __user *, tbuf);
SYSCALL_DEFINE2(setpgid, pid_t, pid, pid_t, pgid);
SYSCALL_DEFINE1(getpgid, pid_t, pid);
SYSCALL_DEFINE0(getpgrp);
SYSCALL_DEFINE1(getsid, pid_t, pid);
SYSCALL_DEFINE0(setsid);
/*SYSCALL_DEFINE1(newuname, struct new_utsname __user *, name);*/
SYSCALL_DEFINE2(sethostname, char __user *, name, int, len);
SYSCALL_DEFINE2(gethostname, char __user *, name, int, len);
SYSCALL_DEFINE2(setdomainname, char __user *, name, int, len);
SYSCALL_DEFINE2(getrlimit, unsigned int, resource, struct rlimit __user *, rlim);
SYSCALL_DEFINE2(setrlimit, unsigned int, resource, struct rlimit __user *, rlim);
SYSCALL_DEFINE2(getrusage, int, who, struct rusage __user *, ru);
SYSCALL_DEFINE1(umask, int, mask);
SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,
		unsigned long, arg4, unsigned long, arg5);
/*SYSCALL_DEFINE3(getcpu, unsigned __user *, cpup, unsigned __user *, nodep,
		struct getcpu_cache __user *, unused);*/
SYSCALL_DEFINE1(sysctl, struct __sysctl_args __user *, args);
SYSCALL_DEFINE1(time, time_t __user *, tloc);
/*SYSCALL_DEFINE1(stime, time_t __user *, tptr); */ /*settimeoftheday instead*/
SYSCALL_DEFINE2(gettimeofday, struct timeval __user *, tv,
		struct timezone __user *, tz);
SYSCALL_DEFINE2(settimeofday, struct timeval __user *, tv,
		struct timezone __user *, tz);
SYSCALL_DEFINE1(adjtimex, struct timex __user *, txc_p);
SYSCALL_DEFINE1(alarm, unsigned int, seconds);
SYSCALL_DEFINE0(getpid);
SYSCALL_DEFINE0(getppid);
SYSCALL_DEFINE0(getuid);
SYSCALL_DEFINE0(geteuid);
SYSCALL_DEFINE0(getgid);
SYSCALL_DEFINE0(getegid);
SYSCALL_DEFINE0(gettid);
SYSCALL_DEFINE1(sysinfo, struct sysinfo __user *, info);
SYSCALL_DEFINE(fadvise64_64)(int fd, loff_t offset, loff_t len, int advice);
SYSCALL_DEFINE(readahead)(int fd, loff_t offset, size_t count);
SYSCALL_DEFINE3(madvise, unsigned long, start, size_t, len_in, int, behavior);

SYSCALL_DEFINE6(mbind, unsigned long, start, unsigned long, len,
		unsigned long, mode, unsigned long __user *, nmask,
		unsigned long, maxnode, unsigned, flags);
SYSCALL_DEFINE3(set_mempolicy, int, mode, unsigned long __user *, nmask,
		unsigned long, maxnode);
SYSCALL_DEFINE4(migrate_pages, pid_t, pid, unsigned long, maxnode,
		const unsigned long __user *, old_nodes,
		const unsigned long __user *, new_nodes);
SYSCALL_DEFINE5(get_mempolicy, int __user *, policy,
		unsigned long __user *, nmask, unsigned long, maxnode,
		unsigned long, addr, unsigned long, flags);
SYSCALL_DEFINE6(move_pages, pid_t, pid, unsigned long, nr_pages,
		const void __user * __user *, pages,
		const int __user *, nodes,
		int __user *, status, int, flags);
SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,
		unsigned char __user *, vec);
SYSCALL_DEFINE1(brk, unsigned long, brk);
SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len);
SYSCALL_DEFINE3(mprotect, unsigned long, start, size_t, len,
		unsigned long, prot);
SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,
		unsigned long, new_len, unsigned long, flags,
		unsigned long, new_addr);
SYSCALL_DEFINE3(msync, unsigned long, start, size_t, len, int, flags);
SYSCALL_DEFINE1(swapoff, const char __user *, specialfile);
SYSCALL_DEFINE2(swapon, const char __user *, specialfile, int, swap_flags);
SYSCALL_DEFINE2(mlock, unsigned long, start, size_t, len);
SYSCALL_DEFINE2(munlock, unsigned long, start, size_t, len);
SYSCALL_DEFINE1(mlockall, int, flags);
SYSCALL_DEFINE0(munlockall);
/*			fs/aio.c		*/
SYSCALL_DEFINE2(io_setup, unsigned, nr_events, aio_context_t __user *, ctxp);
SYSCALL_DEFINE1(io_destroy, aio_context_t, ctx);
SYSCALL_DEFINE3(io_submit, aio_context_t, ctx_id, long, nr,
		struct iocb __user * __user *, iocbpp);
SYSCALL_DEFINE3(io_cancel, aio_context_t, ctx_id, struct iocb __user *, iocb,
		struct io_event __user *, result);
SYSCALL_DEFINE5(io_getevents, aio_context_t, ctx_id,
		long, min_nr,long, nr,
		struct io_event __user *, events,
		struct timespec __user *, timeout);
/*			fs/dcache.c		*/
SYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size);
/*			fs/dcookies.c		*/
SYSCALL_DEFINE(lookup_dcookie)(u64 cookie64, char __user * buf, size_t len);
/*			fs/eventfd.c		*/
SYSCALL_DEFINE2(eventfd2, unsigned int, count, int, flags);
SYSCALL_DEFINE1(eventfd, unsigned int, count);
/*			fs/eventpoll.c		*/
SYSCALL_DEFINE1(epoll_create1, int, flags);
SYSCALL_DEFINE1(epoll_create, int, size);
SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,
		struct epoll_event __user *, event);
SYSCALL_DEFINE4(epoll_wait, int, epfd, struct epoll_event __user *, events,
		int, maxevents, int, timeout);
SYSCALL_DEFINE6(epoll_pwait, int, epfd, struct epoll_event __user *, events,
		int, maxevents, int, timeout, const sigset_t __user *, sigmask,
		size_t, sigsetsize);
/*			fs/exec.c		*/
SYSCALL_DEFINE1(uselib, const char __user *, library);
/*			fs/fcntl.c		*/
SYSCALL_DEFINE3(dup3, unsigned int, oldfd, unsigned int, newfd, int, flags);
SYSCALL_DEFINE2(dup2, unsigned int, oldfd, unsigned int, newfd);
SYSCALL_DEFINE1(dup, unsigned int, fildes);
SYSCALL_DEFINE3(fcntl, unsigned int, fd, unsigned int, cmd, unsigned long, arg);
SYSCALL_DEFINE3(fcntl64, unsigned int, fd, unsigned int, cmd,
		unsigned long, arg);
SYSCALL_DEFINE3(sysfs, int, option, unsigned long, arg1, unsigned long, arg2);

SYSCALL_DEFINE3(ioctl, unsigned int, fd, unsigned int, cmd, unsigned long, arg);
SYSCALL_DEFINE3(ioprio_set, int, which, int, who, int, ioprio);
SYSCALL_DEFINE2(flock, unsigned int, fd, unsigned int, cmd);
/*			fs/namei.c	*/
SYSCALL_DEFINE4(mknodat, int, dfd, const char __user *, filename, int, mode,
		unsigned, dev);
SYSCALL_DEFINE3(mknod, const char __user *, filename, int, mode, unsigned, dev);
SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, int, mode);
SYSCALL_DEFINE2(mkdir, const char __user *, pathname, int, mode);
SYSCALL_DEFINE1(rmdir, const char __user *, pathname);
SYSCALL_DEFINE3(unlinkat, int, dfd, const char __user *, pathname, int, flag);
SYSCALL_DEFINE1(unlink, const char __user *, pathname);
SYSCALL_DEFINE3(symlinkat, 
		const char __user *, oldname,
		int, newdfd, const char __user *, newname);
SYSCALL_DEFINE2(symlink, 
		 const char __user *, oldname,
		 const char __user *, newname);
SYSCALL_DEFINE5(linkat, 
		int, olddfd, const char __user *, oldname,
		int, newdfd, const char __user *, newname, int, flags);
SYSCALL_DEFINE2(link, const char __user *, oldname, const char __user *, newname);
SYSCALL_DEFINE4(renameat, 
		int, olddfd, const char __user *, oldname,
		int, newdfd, const char __user *, newname);
SYSCALL_DEFINE2(rename, const char __user *, oldname, const char __user *, newname);
/*			fs/namespace.c		*/
SYSCALL_DEFINE2(umount, char __user *, name, int, flags);
/*SYSCALL_DEFINE1(oldumount, char __user *, name);*/
SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name,
		char __user *, type, unsigned long, flags, void __user *, data);

SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,
		const char __user *, put_old);
SYSCALL_DEFINE3(nfsservctl, int, cmd, struct nfsctl_arg __user *, arg,
		void __user *, res);
/*			fs/open.c		*/
SYSCALL_DEFINE2(statfs, const char __user *, pathname, struct statfs __user *, buf);
SYSCALL_DEFINE3(statfs64, const char __user *, pathname, size_t, sz, struct statfs64 __user *, buf);
SYSCALL_DEFINE2(fstatfs, unsigned int, fd, struct statfs __user *, buf);
SYSCALL_DEFINE3(fstatfs64, unsigned int, fd, size_t, sz, struct statfs64 __user *, buf);
SYSCALL_DEFINE2(truncate, const char __user *, path, long, length);
SYSCALL_DEFINE2(ftruncate, unsigned int, fd, unsigned long, length);
SYSCALL_DEFINE(truncate64)(const char __user * path, loff_t length);
SYSCALL_DEFINE(ftruncate64)(unsigned int fd, loff_t length);
SYSCALL_DEFINE(fallocate)(int fd, int mode, loff_t offset, loff_t len);
SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode);
SYSCALL_DEFINE2(access, const char __user *, filename, int, mode);
SYSCALL_DEFINE1(chdir, const char __user *, filename);
SYSCALL_DEFINE1(fchdir, unsigned int, fd);
SYSCALL_DEFINE1(chroot, const char __user *, filename);
SYSCALL_DEFINE2(fchmod, unsigned int, fd, mode_t, mode);
SYSCALL_DEFINE3(fchmodat, int, dfd, const char __user *, filename, mode_t, mode);
SYSCALL_DEFINE2(chmod, const char __user *, filename, mode_t, mode);
SYSCALL_DEFINE3(chown, const char __user *, filename, uid_t, user, gid_t, group);
SYSCALL_DEFINE5(fchownat, int, dfd, const char __user *, filename, uid_t, user,
		gid_t, group, int, flag);
SYSCALL_DEFINE3(lchown, const char __user *, filename, uid_t, user, gid_t, group);
SYSCALL_DEFINE3(fchown, unsigned int, fd, uid_t, user, gid_t, group);
SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, int, mode);
SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags,
		int, mode);
SYSCALL_DEFINE2(creat, const char __user *, pathname, int, mode);
SYSCALL_DEFINE1(close, unsigned int, fd);
SYSCALL_DEFINE0(vhangup);

/*			fs/pipe.c		*/
SYSCALL_DEFINE2(pipe2, int __user *, fildes, int, flags);
SYSCALL_DEFINE1(pipe, int __user *, fildes); /*wrap of pipe2*/
/*			fs/readir.c		*/
/*SYSCALL_DEFINE3(old_readdir, unsigned int, fd,
		struct old_linux_dirent __user *, dirent, unsigned int, count);*/
SYSCALL_DEFINE3(getdents, unsigned int, fd,
		struct linux_dirent __user *, dirent, unsigned int, count);
SYSCALL_DEFINE3(getdents64, unsigned int, fd,
		struct linux_dirent64 __user *, dirent, unsigned int, count);
/*			fs/read_write.c		*/
SYSCALL_DEFINE3(lseek, unsigned int, fd, off_t, offset, unsigned int, origin);
/*
SYSCALL_DEFINE5(llseek, unsigned int, fd, unsigned long, offset_high,
		unsigned long, offset_low, loff_t __user *, result,
		unsigned int, origin);
*/
SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count);
SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf,
		size_t, count);
SYSCALL_DEFINE(pread64)(unsigned int fd, char __user *buf,
			size_t count, loff_t pos);
SYSCALL_DEFINE(pwrite64)(unsigned int fd, const char __user *buf,
			 size_t count, loff_t pos);
SYSCALL_DEFINE3(readv, unsigned long, fd, const struct iovec __user *, vec,
		unsigned long, vlen);
SYSCALL_DEFINE3(writev, 
	unsigned long,fd, const struct iovec __user *,vec,unsigned long,vlen);
SYSCALL_DEFINE5(preadv, unsigned long, fd,
		 const struct iovec __user *, vec,
		unsigned long, vlen, 
		unsigned long, pos_l, unsigned long, pos_h);
SYSCALL_DEFINE5(pwritev, unsigned long, fd, const struct iovec __user *, vec,
		unsigned long, vlen, unsigned long, pos_l, unsigned long, pos_h);
SYSCALL_DEFINE4(sendfile, 
	int, out_fd, int, in_fd, off_t __user *, offset, size_t, count);
SYSCALL_DEFINE4(sendfile64, 
	int, out_fd, int, in_fd, loff_t __user *, offset, size_t, count);
/*			fs/select.c		*/
SYSCALL_DEFINE5(select, 
		int, n, fd_set __user *, inp, fd_set __user *, outp,
		fd_set __user *, exp, struct timeval __user *, tvp);
SYSCALL_DEFINE6(pselect6, 
		int, n, fd_set __user *, inp, fd_set __user *, outp,
		fd_set __user *, exp, struct timespec __user *, tsp,
		void __user *, sig);
SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,
		long, timeout_msecs);
SYSCALL_DEFINE5(ppoll, struct pollfd __user *, ufds, unsigned int, nfds,
		struct timespec __user *, tsp, const sigset_t __user *, sigmask,
		size_t, sigsetsize);
/*			fs/signalfd.c		*/
SYSCALL_DEFINE4(signalfd4, int, ufd, sigset_t __user *, user_mask,
		size_t, sizemask, int, flags);
SYSCALL_DEFINE3(signalfd, int, ufd, sigset_t __user *, user_mask,
		size_t, sizemask);
/*			fs/splice.c		*/
SYSCALL_DEFINE4(vmsplice, int, fd, const struct iovec __user *, iov,
		unsigned long, nr_segs, unsigned int, flags);
SYSCALL_DEFINE6(splice, int, fd_in, loff_t __user *, off_in,
		int, fd_out, loff_t __user *, off_out,
		size_t, len, unsigned int, flags);
SYSCALL_DEFINE4(tee, int, fdin, int, fdout, size_t, len, unsigned int, flags);
/*			fs/stat.c		*/
SYSCALL_DEFINE2(stat, char __user *, filename, struct __old_kernel_stat __user *, statbuf);
SYSCALL_DEFINE2(lstat, char __user *, filename, struct __old_kernel_stat __user *, statbuf);
SYSCALL_DEFINE2(fstat, unsigned int, fd, struct __old_kernel_stat __user *, statbuf);
SYSCALL_DEFINE2(newstat, char __user *, filename, struct stat __user *, statbuf);
SYSCALL_DEFINE2(newlstat, char __user *, filename, struct stat __user *, statbuf);
SYSCALL_DEFINE4(newfstatat, int, dfd, char __user *, filename,
		struct stat __user *, statbuf, int, flag);
SYSCALL_DEFINE2(newfstat, unsigned int, fd, struct stat __user *, statbuf);
SYSCALL_DEFINE4(readlinkat, int, dfd, const char __user *, pathname,
		char __user *, buf, int, bufsiz);
SYSCALL_DEFINE3(readlink, const char __user *, path, char __user *, buf,
		int, bufsiz);
SYSCALL_DEFINE2(stat64, char __user *, filename, struct stat64 __user *, statbuf);
SYSCALL_DEFINE2(lstat64, char __user *, filename, struct stat64 __user *, statbuf);
SYSCALL_DEFINE2(fstat64, unsigned long, fd, struct stat64 __user *, statbuf);
SYSCALL_DEFINE4(fstatat64, int, dfd, char __user *, filename,
		struct stat64 __user *, statbuf, int, flag);
/*			fs/super.c		*/
SYSCALL_DEFINE2(ustat, unsigned, dev, struct ustat __user *, ubuf);
/*			fs/sync.c		*/
SYSCALL_DEFINE0(sync);
SYSCALL_DEFINE1(fsync, unsigned int, fd);
SYSCALL_DEFINE1(fdatasync, unsigned int, fd);
SYSCALL_DEFINE(sync_file_range)(int fd, loff_t offset, loff_t nbytes,
				unsigned int flags);
SYSCALL_DEFINE(sync_file_range2)(int fd, unsigned int flags,
				 loff_t offset, loff_t nbytes);
/*			fs/timerfd.c		*/
SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags);
SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,
		const struct itimerspec __user *, utmr,
		struct itimerspec __user *, otmr);
SYSCALL_DEFINE2(timerfd_gettime, int, ufd, struct itimerspec __user *, otmr);
/*			fs/utimes.c		*/
SYSCALL_DEFINE2(utime, char __user *, filename, struct utimbuf __user *, times);
SYSCALL_DEFINE4(utimensat, int, dfd, char __user *, filename,
		struct timespec __user *, utimes, int, flags);
SYSCALL_DEFINE3(futimesat, int, dfd, char __user *, filename,
		struct timeval __user *, utimes);
SYSCALL_DEFINE2(utimes, char __user *, filename,
		struct timeval __user *, utimes);
/*			fs/xattr.c		*/
SYSCALL_DEFINE5(setxattr, const char __user *, pathname,
		const char __user *, name, const void __user *, value,
		size_t, size, int, flags);
SYSCALL_DEFINE5(lsetxattr, const char __user *, pathname,
		const char __user *, name, const void __user *, value,
		size_t, size, int, flags);
SYSCALL_DEFINE5(fsetxattr, int, fd, const char __user *, name,
		const void __user *,value, size_t, size, int, flags);
SYSCALL_DEFINE4(getxattr, const char __user *, pathname,
		const char __user *, name, void __user *, value, size_t, size);
SYSCALL_DEFINE4(lgetxattr, const char __user *, pathname,
		const char __user *, name, void __user *, value, size_t, size);
SYSCALL_DEFINE4(fgetxattr, int, fd, const char __user *, name,
		void __user *, value, size_t, size);
SYSCALL_DEFINE3(listxattr, const char __user *, pathname, char __user *, list,
		size_t, size);
SYSCALL_DEFINE3(llistxattr, const char __user *, pathname, char __user *, list,
		size_t, size);
SYSCALL_DEFINE3(flistxattr, int, fd, char __user *, list, size_t, size);
SYSCALL_DEFINE2(removexattr, const char __user *, pathname,
		const char __user *, name);
SYSCALL_DEFINE2(lremovexattr, const char __user *, pathname,
		const char __user *, name);
SYSCALL_DEFINE2(fremovexattr, int, fd, const char __user *, name);
/*		arch/x86/sys_x86_64.c	*/
SYSCALL_DEFINE6(mmap, unsigned long, addr, unsigned long, len,
		unsigned long, prot, unsigned long, flags,
		unsigned long, fd, unsigned long, off);
SYSCALL_DEFINE1(uname, struct new_utsname __user *, name);
/*		net/socket.c		*/
SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol);
SYSCALL_DEFINE4(socketpair, int, family, int, type, int, protocol,
		int __user *, usockvec);
SYSCALL_DEFINE3(bind, int, fd, struct sockaddr __user *, umyaddr, int, addrlen);
SYSCALL_DEFINE2(listen, int, fd, int, backlog);
SYSCALL_DEFINE4(accept4, int, fd, struct sockaddr __user *, upeer_sockaddr,
		int __user *, upeer_addrlen, int, flags);
SYSCALL_DEFINE3(accept, int, fd, struct sockaddr __user *, upeer_sockaddr,
		int __user *, upeer_addrlen); /*wrap of accept4*/
SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
		int, addrlen);
SYSCALL_DEFINE3(getsockname, int, fd, struct sockaddr __user *, usockaddr,
		int __user *, usockaddr_len);
SYSCALL_DEFINE3(getpeername, int, fd, struct sockaddr __user *, usockaddr,
		int __user *, usockaddr_len);
SYSCALL_DEFINE6(sendto, int, fd, void __user *, buff, size_t, len,
		unsigned, flags, struct sockaddr __user *, addr,
		int, addr_len);
SYSCALL_DEFINE4(send, int, fd, void __user *, buff, size_t, len,
		unsigned, flags);
SYSCALL_DEFINE6(recvfrom, int, fd, void __user *, ubuf, size_t, size,
		unsigned, flags, struct sockaddr __user *, addr,
		int __user *, addr_len);
SYSCALL_DEFINE5(setsockopt, int, fd, int, level, int, optname,
		char __user *, optval, int, optlen);
SYSCALL_DEFINE5(getsockopt, int, fd, int, level, int, optname,
		char __user *, optval, int __user *, optlen);
SYSCALL_DEFINE2(shutdown, int, fd, int, how);
SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned, flags);
SYSCALL_DEFINE3(recvmsg, int, fd, struct msghdr __user *, msg,
		unsigned int, flags);
SYSCALL_DEFINE2(socketcall, int, call, unsigned long __user *, args);
/*			ipc/mqueue.c		*/
SYSCALL_DEFINE4(mq_open, const char __user *, u_name, int, oflag, mode_t, mode,
		struct mq_attr __user *, u_attr);
SYSCALL_DEFINE1(mq_unlink, const char __user *, u_name);
SYSCALL_DEFINE5(mq_timedsend, mqd_t, mqdes, const char __user *, u_msg_ptr,
		size_t, msg_len, unsigned int, msg_prio,
		const struct timespec __user *, u_abs_timeout);
SYSCALL_DEFINE5(mq_timedreceive, mqd_t, mqdes, char __user *, u_msg_ptr,
		size_t, msg_len, unsigned int __user *, u_msg_prio,
		const struct timespec __user *, u_abs_timeout);
SYSCALL_DEFINE2(mq_notify, mqd_t, mqdes,
		const struct sigevent __user *, u_notification);
SYSCALL_DEFINE3(mq_getsetattr, mqd_t, mqdes,
		const struct mq_attr __user *, u_mqstat,
		struct mq_attr __user *, u_omqstat);
/*			ipc/msg.c		*/
SYSCALL_DEFINE2(msgget, key_t, key, int, msgflg);
SYSCALL_DEFINE3(msgctl, int, msqid, int, cmd, struct msqid_ds __user *, buf);
SYSCALL_DEFINE4(msgsnd, int, msqid, struct msgbuf __user *, msgp, size_t, msgsz,
		int, msgflg);
SYSCALL_DEFINE5(msgrcv, int, msqid, struct msgbuf __user *, msgp, size_t, msgsz,
		long, msgtyp, int, msgflg);
SYSCALL_DEFINE3(semget, key_t, key, int, nsems, int, semflg);
SYSCALL_DEFINE(semctl)(int semid, int semnum, int cmd, union semun arg);
SYSCALL_DEFINE4(semtimedop, int, semid, struct sembuf __user *, tsops,
		unsigned, nsops, const struct timespec __user *, timeout);
SYSCALL_DEFINE3(semop, int, semid, struct sembuf __user *, tsops,
		unsigned, nsops);
/*			ipc/shm.c		*/
SYSCALL_DEFINE3(shmget, key_t, key, size_t, size, int, shmflg);
SYSCALL_DEFINE3(shmctl, int, shmid, int, cmd, struct shmid_ds __user *, buf);
SYSCALL_DEFINE3(shmat, int, shmid, char __user *, shmaddr, int, shmflg);
SYSCALL_DEFINE1(shmdt, char __user *, shmaddr);
